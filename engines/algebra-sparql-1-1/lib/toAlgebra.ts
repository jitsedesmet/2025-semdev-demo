import {
  mapAggregate,
  translateAggregates,
  translateNamed,
  translateInlineData,
  translateDatasetClause,
  translateBlankNodesToVariables,
  findAllVariables,
  generateFreshVar,
  translatePath,
  translatePathPredicate,
  simplifyPath,
  translateExpression,
  translateGraphPattern,
  translateBgp,
  accumulateGroupGraphPattern,
  simplifiedJoin,
  translateTripleCollection,
  translateBasicGraphPattern,
  translateTripleNesting,
  recurseGraph,
  translateQuad,
  translateUpdate,
  translateSingleUpdate,
  translateInsertDelete,
  translateUpdateTriplesBlock,
  translateGraphRefSpecific,
  translateGraphRefDefSpec,
  translateGraphRef,
  translateUpdateGraphLoad,
  translateTerm,
  registerContextDefinitions,
  translateBoundAggregate,
  translateQuery,
  createAlgebraContext,
} from '@traqula/algebra-transformations-1-1';
import type { Algebra, ContextConfigs } from '@traqula/algebra-transformations-1-1';
import { IndirBuilder } from '@traqula/core';
import type { SparqlQuery } from '@traqula/rules-sparql-1-1';

export const toAlgebra11Builder = IndirBuilder
  .create(<const> [
    // Aggregate
    translateAggregates,
    mapAggregate,
    translateBoundAggregate,
  ])
  .addMany(
    // General
    translateNamed,
    translateTerm,
    registerContextDefinitions,
    translateInlineData,
    translateDatasetClause,
    translateBlankNodesToVariables,
    findAllVariables,
    generateFreshVar,
    // Path
    translatePath,
    translatePathPredicate,
    simplifyPath,
    // Patterns
    translateExpression,
    translateGraphPattern,
    translateBgp,
    accumulateGroupGraphPattern,
    simplifiedJoin,
    // TripleAndQuad
    translateTripleCollection,
    translateBasicGraphPattern,
    translateTripleNesting,
    recurseGraph,
    translateQuad,
    // Updates
    translateUpdate,
    translateSingleUpdate,
    translateInsertDelete,
    translateUpdateTriplesBlock,
    translateGraphRefSpecific,
    translateGraphRefDefSpec,
    translateGraphRef,
    translateUpdateGraphLoad,
    // ToAlgebra
    translateQuery,
  );

/**
 * Translates the given SPARQL query to SPARQL Algebra.
 * @param query - sparql AST generated by Traqula
 * @param options - Optional options object. Current options:
 * @param options.dataFactory - The Datafactory used to generate terms. Default @rdfjs/data-model.
 * @param options.quads - Boolean indicating whether triples should be converted to Quads
 *        (consumes GRAPH statements). Default false.
 * @param options.prefixes - Pre-defined prefixes for the given query. Default empty.
 * @param options.baseIRI - Base IRI that should be used for the query.
 *        Default undefined (throws error if required).
 * @param options.blankToVariable - translate all blank nodes into variables
 * @returns Operation
 */
export function toAlgebra(query: SparqlQuery, options: ContextConfigs = {}): Algebra.Operation {
  const c = createAlgebraContext(options);
  const transformer = toAlgebra11Builder.build();
  return transformer.translateQuery(c, query, options.quads, options.blankToVariable);
}
