import { sparqlAlgebraTransformerBuilder } from '@traqula/algebra-sparql-1-1';
import type { Algebra, ContextConfigs, translateQuery } from '@traqula/algebra-transformations-1-1';
import {
  createAlgebraContext,
  translateTerm12,
  translateTripleCollection12,
  translateTripleNesting12,
} from '@traqula/algebra-transformations-1-2';
import type { AlgebraContext } from '@traqula/algebra-transformations-1-2';
import { IndirBuilder } from '@traqula/core';
import type { SparqlQuery } from '@traqula/rules-sparql-1-2';

export const sparqlAlgebraTransformerBuilder12 = IndirBuilder
  .create(sparqlAlgebraTransformerBuilder)
  .widenContext<AlgebraContext>()
  .patchRule(translateTerm12)
  .patchRule(translateTripleCollection12)
  .patchRule(translateTripleNesting12)
  .typePatch<{
    [translateQuery.name]: [Algebra.Operation, [SparqlQuery, boolean | undefined, boolean | undefined]];
  }>();

/**
 * Translates the given SPARQL query to SPARQL Algebra.
 * @param query - sparql AST generated by Traqula
 * @param options - Optional options object. Current options:
 * @param options.dataFactory - The Datafactory used to generate terms. Default @rdfjs/data-model.
 * @param options.quads - Boolean indicating whether triples should be converted to Quads
 *        (consumes GRAPH statements). Default false.
 * @param options.prefixes - Pre-defined prefixes for the given query. Default empty.
 * @param options.baseIRI - Base IRI that should be used for the query.
 *        Default undefined (throws error if required).
 * @param options.blankToVariable - translate all blank nodes into variables
 * @returns Operation
 */
export function translate12(query: SparqlQuery, options: ContextConfigs = {}): Algebra.Operation {
  const c = createAlgebraContext(options);
  const transformer = sparqlAlgebraTransformerBuilder12.build();
  return transformer.translateQuery(c, query, options.quads, options.blankToVariable);
}
